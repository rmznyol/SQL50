#Active User Retention [Facebook SQL Interview Question] (Hard)

SELECT 7 as month, COUNT(DISTINCT(u1.user_id))
FROM user_actions as u1
INNER JOIN user_actions as u2
ON u1.user_id = u2.user_id
WHERE EXTRACT(YEAR FROM u1.event_date) = 2022 AND
EXTRACT(YEAR FROM u2.event_date) = 2022 AND
EXTRACT(MONTH FROM u1.event_date) = 6 AND
EXTRACT(MONTH FROM u2.event_date) = 7;


########################################################################
#Y-on-Y Growth Rate [Wayfair SQL Interview Question] (Hard)

WITH cte AS (
  SELECT product_id, SUM(spend) as year_spend, EXTRACT(YEAR FROM transaction_date) as year
  FROM user_transactions 
  GROUP BY  product_id, EXTRACT(YEAR FROM transaction_date))

SELECT c1.year, c1.product_id,c1.year_spend as curr_year_spend, c2.year_spend as prev_year_spend,
ROUND((c1.year_spend - c2.year_spend)/c2.year_spend * 100,2) as yoy_rate
FROM cte as c1
LEFT JOIN cte as c2
ON c1.product_id = c2.product_id AND c1.year -1 = c2.year
ORDER BY c1.product_id, c1.year

########################################################################
Median Google Search Frequency [Google SQL Interview Question] (Hard)

WITH cte AS (
  SELECT c1.searches, SUM(c2.num_users) as acc
  FROM search_frequency as c1
  INNER JOIN search_frequency as c2
  ON c1.searches >= c2.searches
  GROUP BY c1.searches
)

SELECT ROUND(AVG(searches),1)
FROM cte
WHERE acc >= (SELECT SUM(num_users) / 2 FROM search_frequency)
AND acc <= (SELECT SUM(num_users) / 2 + 1 FROM search_frequency)
########################################################################
Advertiser Status [Facebook SQL Interview Question] (Hard)

SELECT CASE 
  WHEN a.user_id is null THEN d.user_id
  ELSE a.user_id
  END
  AS user_id
, CASE
  WHEN paid is null THEN 'CHURN'
  WHEN a.status is null THEN 'NEW'
  WHEN status = 'CHURN' THEN 'RESURRECT'
  ELSE 'EXISTING'
  END
  AS new_status
FROM advertiser as a 
FULL OUTER JOIN daily_pay as d
ON a.user_id = d.user_id
ORDER BY user_id;